#!/usr/bin/env perl
#
# Summary: Manages local::lib paths for each Perl version
#
# Usage: plenv lib list
#        plenv lib create [perl-version@]name
#        plenv lib delete [perl-version@]name
#
# Manages local::lib paths, separately to each installed perl.
# When no 'perl-version@' part is given the current perl is assumed.

use strict;
use File::Basename qw(basename);
use File::Path qw(rmtree);

sub cmd_list {
    for my $name (glob "$ENV{PLENV_ROOT}/libs/*") {
        print basename($name), "\n";
    }
}

sub current_perl {
    chomp(my $version = `plenv version-name`);
    $version;
}

sub resolve_name {
    my $name = shift;

    my($perl_ver, $lib_name) = split /@/, $name, 2;
    $perl_ver ||= current_perl;

    ($perl_ver, $lib_name);
}

sub cmd_create {
    my $lib = shift
      or die "Usage: plenv lib create [perl-version@]name\n";

    $lib = '@' . $lib unless $lib =~ /@/;
    my($perl_ver, $lib_name) = resolve_name($lib);

    my $target = "$ENV{PLENV_ROOT}/libs/$perl_ver\@$lib_name";
    if (-d $target) {
        die "lib $perl_ver\@$lib_name already exists.\n";
    }

    warn "Creating lib '$lib_name' for $perl_ver\n";
    {
        require local::lib;
        local @INC = @INC;
        local::lib->setup_local_lib_for($target,
            ($local::lib::VERSION > 1.008026) ? () : (0));
    }
}

sub cmd_delete {
    my $lib = shift
      or die "Usage: plenv lib delete [perl-version@]name\n";

    $lib = '@' . $lib unless $lib =~ /@/;
    my($perl_ver, $lib_name) = resolve_name($lib);

    my $mm_opt = $ENV{PERL_MM_OPT};
    $mm_opt =~ s{^INSTALL_BASE=/(.*?/)+}{} if defined $mm_opt;
    my ($current_perl_ver, $current_lib_name) = split /@/, $mm_opt, 2;

    my $target = "$ENV{PLENV_ROOT}/libs/$perl_ver\@$lib_name";
    die "lib '$target' doesn't exist.\n" unless -d $target;

    rmtree [$target], 0, 0;
    print "lib '$target' is deleted.\n";

    if ($perl_ver eq $current_perl_ver && $lib_name eq $current_lib_name) {
        kill('KILL', getppid()); # dirty, this'll work on any POSIX-compat OS
    }
}

*cmd_rm = \&cmd_delete;

my $cmd = shift @ARGV || "list";

{
    no strict 'refs';
    my $command = defined &{"cmd_$cmd"}
      ? sub { "cmd_$cmd"->(@_) } : sub { die "No such command: plenv lib $cmd\n" };
    $command->(@ARGV);
}
